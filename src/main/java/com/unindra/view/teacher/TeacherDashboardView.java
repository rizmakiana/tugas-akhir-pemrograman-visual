/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.unindra.view.teacher;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Vector;

import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;

import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Component;

import com.unindra.entity.Attendance;
import com.unindra.entity.Course;
import com.unindra.entity.Grade;
import com.unindra.entity.Section;
import com.unindra.entity.Student;
import com.unindra.entity.Teacher;
import com.unindra.entity.TeachingAssignment;
import com.unindra.model.request.AttendanceRequest;
import com.unindra.model.response.CourseResponse;
import com.unindra.model.response.PresenceResponse;
import com.unindra.model.response.ScoreResponse;
import com.unindra.model.response.StudentResponse;
import com.unindra.service.center.TeacherMasterService;
import lombok.extern.slf4j.Slf4j;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author rizmakiana
 */
@Component
@Scope("prototype")
@Slf4j
public class TeacherDashboardView extends javax.swing.JFrame {

    public Teacher teacher;

    private final TeacherMasterService masterService;

    /**
     * Creates new form TeacherDashboardView
     */
    public TeacherDashboardView(TeacherMasterService masterService) {
        this.masterService = masterService;

    }

    public void showForTeacher(Teacher teacher) {
        this.teacher = teacher;
        this.setTitle("Dashboard - " + teacher.getName());
        // Load data spesifik guru ke komponen (label, table, dll)
        // loadTeacherData();
        generateComponents();
        this.setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        scorePanel = new javax.swing.JPanel();
        scorePanelClassroomList = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        scoreTable = new javax.swing.JTable();
        bgScorePanel = new javax.swing.JLabel();
        scorePanelSaveButton = new javax.swing.JButton();
        scorePanelPrintButton = new javax.swing.JButton();
        presencePanel = new javax.swing.JPanel();
        presencePanelClassdateList = new javax.swing.JComboBox<>();
        presencePanelClassroomList = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        presenceTable = new javax.swing.JTable();
        bgPresencePanel = new javax.swing.JLabel();
        presencePanelSaveButton = new javax.swing.JButton();
        presencePanelPrintButton = new javax.swing.JButton();
        presenceRecapPanel = new javax.swing.JPanel();
        presenceRecapPanelClassroomList = new javax.swing.JComboBox<>();
        jScrollPane3 = new javax.swing.JScrollPane();
        presenceRecapTable = new javax.swing.JTable();
        bgPresenceRecapPanel = new javax.swing.JLabel();
        presencePanelPrintButton1 = new javax.swing.JButton();
        bg = new javax.swing.JLabel();
        scoreButton = new javax.swing.JButton();
        presenceButton = new javax.swing.JButton();
        presenceRecapButton = new javax.swing.JButton();
        exitButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        mainPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        scorePanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        scorePanelClassroomList.setBorder(null);
        scorePanelClassroomList.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                scorePanelClassroomListItemStateChanged(evt);
            }
        });
        scorePanel.add(scorePanelClassroomList, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 70, 240, -1));

        scoreTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "NPM", "Nama", "Nilai Tugas", "Nilai UTS", "Nilai UAS", "Nilai Akhir"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, true, true, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        scoreTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(scoreTable);
        if (scoreTable.getColumnModel().getColumnCount() > 0) {
            scoreTable.getColumnModel().getColumn(0).setResizable(false);
            scoreTable.getColumnModel().getColumn(0).setPreferredWidth(20);
            scoreTable.getColumnModel().getColumn(1).setResizable(false);
            scoreTable.getColumnModel().getColumn(1).setPreferredWidth(100);
            scoreTable.getColumnModel().getColumn(2).setResizable(false);
            scoreTable.getColumnModel().getColumn(3).setResizable(false);
            scoreTable.getColumnModel().getColumn(4).setResizable(false);
            scoreTable.getColumnModel().getColumn(5).setResizable(false);
        }

        scorePanel.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 110, 960, 530));

        bgScorePanel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/image/Panel guru - nilai siswa.png"))); // NOI18N
        scorePanel.add(bgScorePanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1010, 660));

        scorePanelSaveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                scorePanelSaveButtonActionPerformed(evt);
            }
        });
        scorePanel.add(scorePanelSaveButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(891, 66, 50, 30));

        scorePanelPrintButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                scorePanelPrintButtonActionPerformed(evt);
            }
        });
        scorePanel.add(scorePanelPrintButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(945, 66, 50, 30));

        mainPanel.add(scorePanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1010, 660));

        presencePanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        presencePanelClassdateList.setBorder(null);
        presencePanel.add(presencePanelClassdateList, new org.netbeans.lib.awtextra.AbsoluteConstraints(732, 70, 150, -1));

        presencePanelClassroomList.setBorder(null);
        presencePanelClassroomList.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                presencePanelClassroomListItemStateChanged(evt);
            }
        });
        presencePanel.add(presencePanelClassroomList, new org.netbeans.lib.awtextra.AbsoluteConstraints(475, 70, 240, -1));

        presenceTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"202243502885", null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "NPM", "Nama", "Absensi"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        presenceTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(presenceTable);
        if (presenceTable.getColumnModel().getColumnCount() > 0) {
            presenceTable.getColumnModel().getColumn(0).setResizable(false);
            presenceTable.getColumnModel().getColumn(0).setPreferredWidth(90);
            presenceTable.getColumnModel().getColumn(1).setResizable(false);
            presenceTable.getColumnModel().getColumn(1).setPreferredWidth(200);
            presenceTable.getColumnModel().getColumn(2).setResizable(false);
            presenceTable.getColumnModel().getColumn(2).setPreferredWidth(20);
        }

        presencePanel.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 100, 960, 540));

        bgPresencePanel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/image/Panel guru - absen siswa.png"))); // NOI18N
        presencePanel.add(bgPresencePanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1010, 660));

        presencePanelSaveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                presencePanelSaveButtonActionPerformed(evt);
            }
        });
        presencePanel.add(presencePanelSaveButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(890, 65, 50, 30));
        presencePanel.add(presencePanelPrintButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(947, 65, 50, 30));

        mainPanel.add(presencePanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1010, 660));

        presenceRecapPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        presenceRecapPanelClassroomList.setBorder(null);
        presenceRecapPanelClassroomList.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                presenceRecapPanelClassroomListItemStateChanged(evt);
            }
        });
        presenceRecapPanel.add(presenceRecapPanelClassroomList, new org.netbeans.lib.awtextra.AbsoluteConstraints(695, 70, 240, -1));

        presenceRecapTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"202243502885", "Rizky Mualana", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "NPM", "Nama", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        presenceRecapTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane3.setViewportView(presenceRecapTable);
        if (presenceRecapTable.getColumnModel().getColumnCount() > 0) {
            presenceRecapTable.getColumnModel().getColumn(0).setResizable(false);
            presenceRecapTable.getColumnModel().getColumn(0).setPreferredWidth(90);
            presenceRecapTable.getColumnModel().getColumn(1).setResizable(false);
            presenceRecapTable.getColumnModel().getColumn(1).setPreferredWidth(200);
            presenceRecapTable.getColumnModel().getColumn(2).setResizable(false);
            presenceRecapTable.getColumnModel().getColumn(2).setPreferredWidth(20);
            presenceRecapTable.getColumnModel().getColumn(3).setResizable(false);
            presenceRecapTable.getColumnModel().getColumn(3).setPreferredWidth(20);
            presenceRecapTable.getColumnModel().getColumn(4).setResizable(false);
            presenceRecapTable.getColumnModel().getColumn(4).setPreferredWidth(20);
            presenceRecapTable.getColumnModel().getColumn(5).setResizable(false);
            presenceRecapTable.getColumnModel().getColumn(5).setPreferredWidth(20);
            presenceRecapTable.getColumnModel().getColumn(6).setResizable(false);
            presenceRecapTable.getColumnModel().getColumn(6).setPreferredWidth(20);
            presenceRecapTable.getColumnModel().getColumn(7).setResizable(false);
            presenceRecapTable.getColumnModel().getColumn(7).setPreferredWidth(20);
            presenceRecapTable.getColumnModel().getColumn(8).setResizable(false);
            presenceRecapTable.getColumnModel().getColumn(8).setPreferredWidth(20);
            presenceRecapTable.getColumnModel().getColumn(9).setResizable(false);
            presenceRecapTable.getColumnModel().getColumn(9).setPreferredWidth(20);
            presenceRecapTable.getColumnModel().getColumn(10).setResizable(false);
            presenceRecapTable.getColumnModel().getColumn(10).setPreferredWidth(20);
            presenceRecapTable.getColumnModel().getColumn(11).setResizable(false);
            presenceRecapTable.getColumnModel().getColumn(11).setPreferredWidth(20);
            presenceRecapTable.getColumnModel().getColumn(12).setResizable(false);
            presenceRecapTable.getColumnModel().getColumn(12).setPreferredWidth(20);
            presenceRecapTable.getColumnModel().getColumn(13).setResizable(false);
            presenceRecapTable.getColumnModel().getColumn(13).setPreferredWidth(20);
            presenceRecapTable.getColumnModel().getColumn(14).setResizable(false);
            presenceRecapTable.getColumnModel().getColumn(14).setPreferredWidth(20);
            presenceRecapTable.getColumnModel().getColumn(15).setResizable(false);
            presenceRecapTable.getColumnModel().getColumn(15).setPreferredWidth(20);
            presenceRecapTable.getColumnModel().getColumn(16).setResizable(false);
            presenceRecapTable.getColumnModel().getColumn(16).setPreferredWidth(20);
            presenceRecapTable.getColumnModel().getColumn(17).setResizable(false);
            presenceRecapTable.getColumnModel().getColumn(17).setPreferredWidth(20);
        }

        presenceRecapPanel.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 100, 960, 540));

        bgPresenceRecapPanel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/image/Panel guru - rekap absen.png"))); // NOI18N
        presenceRecapPanel.add(bgPresenceRecapPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1010, 660));

        presencePanelPrintButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                presencePanelPrintButton1ActionPerformed(evt);
            }
        });
        presenceRecapPanel.add(presencePanelPrintButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(947, 65, 50, 30));

        mainPanel.add(presenceRecapPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1010, 660));

        getContentPane().add(mainPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 30, 1010, 660));

        bg.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/image/Dashboard Teacher.png"))); // NOI18N
        getContentPane().add(bg, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1280, 720));

        scoreButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                scoreButtonActionPerformed(evt);
            }
        });
        getContentPane().add(scoreButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 130, 130, 50));

        presenceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                presenceButtonActionPerformed(evt);
            }
        });
        getContentPane().add(presenceButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 195, 130, 50));

        presenceRecapButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                presenceRecapButtonActionPerformed(evt);
            }
        });
        getContentPane().add(presenceRecapButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 260, 130, 50));

        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });
        getContentPane().add(exitButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 660, 180, 40));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void presencePanelPrintButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_presencePanelPrintButton1ActionPerformed
        
         try {
        List<PresenceResponse> data = new ArrayList<>();
        DefaultTableModel model = (DefaultTableModel) presenceRecapTable.getModel();

        for (int i = 0; i < model.getRowCount(); i++) {
            PresenceResponse response = new PresenceResponse();

            response.setNpm(String.valueOf(model.getValueAt(i, 0)));
            response.setNama(String.valueOf(model.getValueAt(i, 1)));

            for (int j = 1; j <= 16; j++) {
                Object cellValue = model.getValueAt(i, j + 1); // kolom 2-17
                String value;

                if (cellValue == null) {
                    value = "-"; // Atur default kalau null
                } else if (cellValue instanceof Boolean booleanValue) {
                    value = booleanValue ? "H" : "A";
                } else {
                    value = String.valueOf(cellValue);
                }

                switch (j) {
                    case 1 -> response.setSatu(value);
                    case 2 -> response.setDua(value);
                    case 3 -> response.setTiga(value);
                    case 4 -> response.setEmpat(value);
                    case 5 -> response.setLima(value);
                    case 6 -> response.setEnam(value);
                    case 7 -> response.setTujuh(value);
                    case 8 -> response.setDelapan(value);
                    case 9 -> response.setSembilan(value);
                    case 10 -> response.setSepuluh(value);
                    case 11 -> response.setSebelas(value);
                    case 12 -> response.setDuabelas(value);
                    case 13 -> response.setTigabelas(value);
                    case 14 -> response.setEmpatbelas(value);
                    case 15 -> response.setLimabelas(value);
                    case 16 -> response.setEnambelas(value);
                }
            }

            data.add(response);
        }

        String reportPath = "src/main/resources/assets/report/AbsensiReport.jasper"; // Sesuaikan path file jasper
        JRBeanCollectionDataSource dataSource = new JRBeanCollectionDataSource(data);
        Map<String, Object> parameters = new HashMap<>();

        JasperPrint print = JasperFillManager.fillReport(reportPath, parameters, dataSource);
        JasperViewer viewer = new JasperViewer(print, false);
        viewer.setVisible(true);

    } catch (Exception e) {
        e.printStackTrace();
    }

    }//GEN-LAST:event_presencePanelPrintButton1ActionPerformed

    private void scorePanelPrintButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_scorePanelPrintButtonActionPerformed

        try {
            List<ScoreResponse> data = new ArrayList<>();

            DefaultTableModel model = (DefaultTableModel) scoreTable.getModel();

            for (int i = 0; i < model.getRowCount(); i++) {

                ScoreResponse response = new ScoreResponse();

                response.setId(model.getValueAt(i, 0).toString());
                response.setNama(model.getValueAt(i, 1).toString());
                response.setNilaitugas(model.getValueAt(i, 2).toString());
                response.setNilaiuts(model.getValueAt(i, 3).toString());
                response.setNilaiuas(model.getValueAt(i, 4).toString());
                response.setNilaiakhir(model.getValueAt(i, 5).toString());


                data.add(response);
            }
            String reportPath = "src/main/resources/assets/report/reportNilai.jasper"; // Ganti dengan path milikmu
            JRBeanCollectionDataSource dataSource = new JRBeanCollectionDataSource(data);

            Map<String, Object> parameters = new HashMap<>(); // kosongkan jika tidak perlu

            JasperPrint print = JasperFillManager.fillReport(reportPath, parameters, dataSource);
            JasperViewer viewer = new JasperViewer(print, false);
            viewer.setVisible(true);

        } catch (Exception e) {
            e.printStackTrace();
        }

    }// GEN-LAST:event_scorePanelPrintButtonActionPerformed

    private void presenceRecapButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_presenceRecapButtonActionPerformed

        closeAllPanel();

        loadPresenceRecapData();
        presenceRecapPanel.setVisible(true);

    }// GEN-LAST:event_presenceRecapButtonActionPerformed

    private void presenceRecapPanelClassroomListItemStateChanged(java.awt.event.ItemEvent evt) {// GEN-FIRST:event_presenceRecapPanelClassroomListItemStateChanged
        loadPresenceRecapData();
    }// GEN-LAST:event_presenceRecapPanelClassroomListItemStateChanged

    private void presencePanelClassroomListItemStateChanged(java.awt.event.ItemEvent evt) {// GEN-FIRST:event_presencePanelClassroomListItemStateChanged

        String classroom = presencePanelClassroomList.getSelectedItem().toString();
        TeachingAssignment assignment = masterService.findByTeacherAndCourseAndSection(teacher.getId(), classroom);

        String[] meetings = masterService.getAvailableMeeting(assignment.getId());
        presencePanelClassdateList.setModel(new DefaultComboBoxModel<>(meetings));

        loadPresenceData();

    }// GEN-LAST:event_presencePanelClassroomListItemStateChanged

    private void presencePanelSaveButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_presencePanelSaveButtonActionPerformed

        DefaultTableModel model = (DefaultTableModel) presenceTable.getModel();

        Object selectedItem = presencePanelClassroomList.getSelectedItem();
        Object selectedMeeting = presencePanelClassdateList.getSelectedItem();

        String classroomInfo = selectedItem.toString(); // e.g. "Multimedia/10/A/Pemrograman"
        int meetingNumber = Integer.parseInt(selectedMeeting.toString().replace("Pertemuan ", ""));

        List<AttendanceRequest> attendances = new ArrayList<>();

        for (int i = 0; i < model.getRowCount(); i++) {
            Integer studentId = (Integer) model.getValueAt(i, 0);
            boolean isPresent = (Boolean) model.getValueAt(i, 2);

            AttendanceRequest req = new AttendanceRequest();
            req.setStudentId(studentId);
            req.setIsPresent(isPresent);

            attendances.add(req);
        }

        // Panggil ke service
        String errorMessage = masterService.saveAttendance(teacher.getId(), classroomInfo, meetingNumber, attendances);
        if (errorMessage != null) {
            JOptionPane.showMessageDialog(this, errorMessage, "Gagal Simpan", JOptionPane.ERROR_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(this, "Presensi berhasil disimpan!", "Sukses",
                    JOptionPane.INFORMATION_MESSAGE);
        }

    }// GEN-LAST:event_presencePanelSaveButtonActionPerformed

    public void generateComponents() {
        initComponents();

        String[] classroom = masterService.getClassroomList(teacher.getId());
        scorePanelClassroomList.setModel(new DefaultComboBoxModel<>(classroom));
        presencePanelClassroomList.setModel(new DefaultComboBoxModel<>(classroom));
        presenceRecapPanelClassroomList.setModel(new DefaultComboBoxModel<>(classroom));

        setEditableScoreTable();
        generatePresenceTable();
        generatePresenceRecapTable();

        loadScoreData();
        closeAllPanel();
        scorePanel.setVisible(true);
    }

    private void scorePanelClassroomListItemStateChanged(java.awt.event.ItemEvent evt) {// GEN-FIRST:event_scorePanelClassroomListItemStateChanged

        loadScoreData();

    }// GEN-LAST:event_scorePanelClassroomListItemStateChanged

    private void scorePanelSaveButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_scorePanelSaveButtonActionPerformed

        DefaultTableModel model = (DefaultTableModel) scoreTable.getModel();

        // Validasi combobox
        Object selectedClassroom = scorePanelClassroomList.getSelectedItem();
        if (selectedClassroom == null) {
            JOptionPane.showMessageDialog(this, "Silakan pilih kelas terlebih dahulu", "Peringatan",
                    JOptionPane.WARNING_MESSAGE);
            return;
        }

        String classroom = selectedClassroom.toString();

        // Kirim ke service
        String errorMessage = masterService.saveScoresFromTable(classroom, model, teacher);

        if (errorMessage != null) {
            JOptionPane.showMessageDialog(this, errorMessage, "Gagal Simpan", JOptionPane.ERROR_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(this, "Nilai berhasil disimpan!", "Sukses", JOptionPane.INFORMATION_MESSAGE);
        }

    }// GEN-LAST:event_scorePanelSaveButtonActionPerformed

    private void scoreButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_scoreButtonActionPerformed

        closeAllPanel();

        scorePanel.setVisible(true);
        loadScoreData();

    }// GEN-LAST:event_scoreButtonActionPerformed

    private void presenceButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_presenceButtonActionPerformed

        closeAllPanel();

        String classroom = presencePanelClassroomList.getSelectedItem().toString();
        TeachingAssignment assignment = masterService.findByTeacherAndCourseAndSection(teacher.getId(), classroom);

        String[] meetings = masterService.getAvailableMeeting(assignment.getId());
        presencePanelClassdateList.setModel(new DefaultComboBoxModel<>(meetings));

        loadPresenceData();
        presencePanel.setVisible(true);

    }// GEN-LAST:event_presenceButtonActionPerformed

    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_exitButtonActionPerformed
        this.setVisible(false);
    }// GEN-LAST:event_exitButtonActionPerformed

    public void closeAllPanel() {
        for (JPanel panel : getPanels()) {
            panel.setVisible(false);
        }
    }

    public JPanel[] getPanels() {
        return new JPanel[] {
                presencePanel,
                scorePanel,
                presenceRecapPanel
        };
    }

    public void setEditableScoreTable() {
        scoreTable.getModel().addTableModelListener(new TableModelListener() {
            public void tableChanged(TableModelEvent e) {
                int row = e.getFirstRow();
                int column = e.getColumn();

                if (column == 2 || column == 3 || column == 4) {
                    DefaultTableModel model = (DefaultTableModel) scoreTable.getModel();
                    try {
                        Double tugas = Double.parseDouble(model.getValueAt(row, 2).toString());
                        Double uts = Double.parseDouble(model.getValueAt(row, 3).toString());
                        Double uas = Double.parseDouble(model.getValueAt(row, 4).toString());

                        double nilaiAkhir = getFinalTestScore(tugas, uts, uas);

                        model.setValueAt(nilaiAkhir, row, 5);
                    } catch (Exception ex) {
                        model.setValueAt(0.0, row, 5);
                    }
                }
            }
        });
    }

    public void generatePresenceTable() {
        DefaultTableModel model = new DefaultTableModel(
                new Object[] { "NPM", "Nama", "Absensi" }, 0) {
            Class<?>[] types = new Class<?>[] {
                    String.class, String.class, Boolean.class
            };
            boolean[] canEdit = new boolean[] {
                    false, false, true
            };

            @Override
            public Class<?> getColumnClass(int columnIndex) {
                return types[columnIndex];
            }

            @Override
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit[columnIndex];
            }
        };

        presenceTable.setModel(model);
    }

    public void generatePresenceRecapTable() {
        // 1. Simpan lebar kolom
        int columnCount = presenceRecapTable.getColumnCount();
        int[] columnWidths = new int[columnCount];
        for (int i = 0; i < columnCount; i++) {
            columnWidths[i] = presenceRecapTable.getColumnModel().getColumn(i).getPreferredWidth();
        }

        // 2. Ambil model lama dan kolom header
        DefaultTableModel oldModel = (DefaultTableModel) presenceRecapTable.getModel();
        Vector<String> columnNames = new Vector<>();
        for (int i = 0; i < oldModel.getColumnCount(); i++) {
            columnNames.add(oldModel.getColumnName(i));
        }

        // 3. Buat model baru dengan tipe kolom Boolean untuk kolom 2-17
        DefaultTableModel newModel = new DefaultTableModel(null, columnNames) {
            @Override
            public Class<?> getColumnClass(int columnIndex) {
                if (columnIndex >= 2 && columnIndex <= 17) {
                    return Boolean.class;
                }
                return String.class;
            }

            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };

        presenceRecapTable.setModel(newModel);

        // 4. Kembalikan lebar kolom
        for (int i = 0; i < columnWidths.length; i++) {
            presenceRecapTable.getColumnModel().getColumn(i).setPreferredWidth(columnWidths[i]);
        }
    }

    private void loadPresenceData() {

        DefaultTableModel model = (DefaultTableModel) presenceTable.getModel();
        model.setRowCount(0);

        Object selectedItem = presencePanelClassroomList.getSelectedItem();

        if (selectedItem == null) {
            return;
        }

        String classroom = selectedItem.toString();

        TeachingAssignment assignment = masterService.findAssignmentWithStudents(teacher.getId(), classroom);
        Section section = assignment.getSection();
        List<Student> students = section.getStudents();

        // jTable1.setModel(model);
        for (Student s : students) {
            model.addRow(new Object[] {
                    s.getId(),
                    s.getName(),
                    false
            });
        }
    }

    private void loadScoreData() {

        DefaultTableModel model = (DefaultTableModel) scoreTable.getModel();
        model.setRowCount(0);

        Object selectedItem = scorePanelClassroomList.getSelectedItem();

        if (selectedItem == null) {
            return;
        }

        String classroom = selectedItem.toString();

        TeachingAssignment assignment = masterService.findByTeacherAndCourseAndSection(teacher.getId(), classroom);
        List<Grade> grades = assignment.getGrades();

        for (Grade grade : grades) {
            Student student = grade.getStudent();

            Double taskScore = grade.getTaskScore() != null ? grade.getTaskScore() : 0;
            Double midTestScore = grade.getMidTestScore() != null ? grade.getMidTestScore() : 0;
            Double lastTestScore = grade.getLastTestScore() != null ? grade.getLastTestScore() : 0;

            model.addRow(new Object[] {
                    student.getId(),
                    student.getName(),
                    taskScore,
                    midTestScore,
                    lastTestScore,
                    getFinalTestScore(taskScore, midTestScore, lastTestScore)
            });
        }
    }

    private void loadPresenceRecapData() {

        DefaultTableModel model = (DefaultTableModel) presenceRecapTable.getModel();
        model.setRowCount(0);

        Object selectedItem = presenceRecapPanelClassroomList.getSelectedItem();

        if (selectedItem == null) {
            return;
        }

        String classroom = selectedItem.toString();
        TeachingAssignment assignment = masterService.findAssignmentWithStudents(teacher.getId(), classroom);

        // Ambil semua siswa dari Section TeachingAssignment
        List<Student> students = assignment.getSection().getStudents();

        // Ambil semua data absensi untuk teaching assignment ini
        List<Attendance> allAttendances = masterService.findAttendacesByTeachingAssignmentId(assignment.getId());

        // Kelompokkan absensi berdasarkan student dan meetingNumber
        Map<Integer, Map<Integer, Boolean>> presenceMap = new HashMap<>();
        for (Attendance attendance : allAttendances) {
            // log.info("Student : {}", attendance.getStudent().getId());
            // log.info("Meeting Number {}", attendance.getMeetingNumber());
            // log.info("Is Present {}", attendance.getIsPresent());

            Integer studentId = attendance.getStudent().getId();
            Integer meeting = attendance.getMeetingNumber();
            Boolean isPresent = attendance.getIsPresent();

            presenceMap
                    .computeIfAbsent(studentId, k -> new HashMap<>())
                    .put(meeting, isPresent);
        }

        // Tambahkan data ke model
        for (Student student : students) {
            Object[] row = new Object[18]; // 2 (NPM, Nama) + 16 (pertemuan)
            row[0] = student.getId();
            row[1] = student.getName();

            Map<Integer, Boolean> studentPresence = presenceMap.getOrDefault(student.getId(), new HashMap<>());
            for (int i = 1; i <= 16; i++) {
                row[i + 1] = studentPresence.getOrDefault(i, false); // default: tidak hadir
                // row[i + 1] = true;
            }

            model.addRow(row);
        }
    }

    // for (int meeting = 1; meeting <= 16; meeting++) {
    // row[meeting + 1] = studentPresence.getOrDefault(meeting, false);
    // }

    public double getFinalTestScore(Double taskScore, Double midTestScore, Double lastTestScore) {
        return ((0.2 * taskScore) + (0.3 * midTestScore) + (0.5 * lastTestScore));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel bg;
    private javax.swing.JLabel bgPresencePanel;
    private javax.swing.JLabel bgPresenceRecapPanel;
    private javax.swing.JLabel bgScorePanel;
    private javax.swing.JButton exitButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JButton presenceButton;
    private javax.swing.JPanel presencePanel;
    private javax.swing.JComboBox<String> presencePanelClassdateList;
    private javax.swing.JComboBox<String> presencePanelClassroomList;
    private javax.swing.JButton presencePanelPrintButton;
    private javax.swing.JButton presencePanelPrintButton1;
    private javax.swing.JButton presencePanelSaveButton;
    private javax.swing.JButton presenceRecapButton;
    private javax.swing.JPanel presenceRecapPanel;
    private javax.swing.JComboBox<String> presenceRecapPanelClassroomList;
    private javax.swing.JTable presenceRecapTable;
    private javax.swing.JTable presenceTable;
    private javax.swing.JButton scoreButton;
    private javax.swing.JPanel scorePanel;
    private javax.swing.JComboBox<String> scorePanelClassroomList;
    private javax.swing.JButton scorePanelPrintButton;
    private javax.swing.JButton scorePanelSaveButton;
    private javax.swing.JTable scoreTable;
    // End of variables declaration//GEN-END:variables
}
