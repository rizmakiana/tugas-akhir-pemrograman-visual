package com.unindra.service;

import java.time.LocalDate;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.unindra.entity.Student;
import com.unindra.entity.Teacher;
import com.unindra.model.RegisterUserRequest;
import com.unindra.repository.TeacherRepository;

@Service
public class TeacherService {

    @Autowired
    private TeacherRepository teacherRepository;

    @Autowired
    private ValidationService validationService;

    @Autowired
    private PasswordService passwordService;

    public void deleteById(String id) {
        teacherRepository.deleteById(id);

    }

    public String add(RegisterUserRequest request) {

        String errorMessage = validationService.validate(request);

        if (errorMessage != null) {
            return errorMessage;
        }

        if (isUsernameExist(request.getUsername())) {
            return "Username sudah digunakan";
        }

        // password generated by birthdate
        String password = String.join("", request.getDateBirth(), String.valueOf(request.getMonthBirth()),
                request.getYearBirth());

        String hashedPassword = passwordService.generateHashPw(password);
        String birthPlace = String.join(", ", request.getDistrict(), request.getCity(), request.getProvience());

        Integer year = Integer.parseInt(request.getYearBirth());
        Integer month = request.getMonthBirth() + 1;
        Integer date = Integer.parseInt(request.getDateBirth());

        LocalDate localDate = LocalDate.of(year, month, date);

        Teacher teacher = new Teacher();
        teacher.setName(request.getFullName());
        teacher.setUsername(request.getUsername());
        teacher.setPassword(hashedPassword);
        teacher.setEmail(request.getEmail());
        teacher.setPhoneNumber(request.getPhoneNumber());
        teacher.setBirthDate(localDate);
        teacher.setBirthPlace(birthPlace);

        teacherRepository.save(teacher);

        return null;
    }

    private boolean isUsernameExist(String username) {
        return teacherRepository.existsByUsername(username);
    }

    public List<Teacher> getAll() {
        return teacherRepository.findAll();
    }

    public Optional<Teacher> findTeacherByUsername(String username) {
        return teacherRepository.findByUsername(username);
    }

    public String edit(RegisterUserRequest request) {

        String errorMessage = validationService.validate(request);

        if (errorMessage != null) {
            return errorMessage;
        }

        Optional<Teacher> userWithUsername = teacherRepository.findByUsername(request.getUsername());

        if (userWithUsername.isPresent() && !userWithUsername.get().getId().equals(request.getId())) {
            return "Username sudah dipakai oleh pengguna lain";
        }

        // Ambil teacher berdasarkan ID (bukan username!)
        Teacher teacher = teacherRepository.findById(request.getId())
                .orElseThrow(() -> new IllegalArgumentException("Data tidak ditemukan"));

        teacher.setName(request.getFullName());
        teacher.setUsername(request.getUsername());
        teacher.setEmail(request.getEmail());
        teacher.setPhoneNumber(request.getPhoneNumber());

        Integer year = Integer.parseInt(request.getYearBirth());
        Integer month = request.getMonthBirth() + 1;
        Integer date = Integer.parseInt(request.getDateBirth());

        LocalDate localDate = LocalDate.of(year, month, date);
        String birthPlace = String.join(", ", request.getDistrict(), request.getCity(), request.getProvience());

        teacher.setBirthDate(localDate);
        teacher.setBirthPlace(birthPlace);

        teacherRepository.save(teacher);

        return null;
    }

    public List<Teacher> searchTeachers(String keyword) {

        if (keyword == null || keyword.trim().isEmpty()) {
            return teacherRepository.findAll(); // kembalikan semua kalau kosong
        }
        return teacherRepository.searchAllFields(keyword.trim());

    }

}
