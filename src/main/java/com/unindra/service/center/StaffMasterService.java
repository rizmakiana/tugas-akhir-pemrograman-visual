package com.unindra.service.center;

import java.text.DateFormatSymbols;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.time.temporal.ChronoField;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
import java.util.Optional;
import java.util.Set;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.unindra.entity.Attendance;
import com.unindra.entity.Classroom;
import com.unindra.entity.Course;
import com.unindra.entity.Department;
import com.unindra.entity.District;
import com.unindra.entity.Grade;
import com.unindra.entity.Province;
import com.unindra.entity.Regency;
import com.unindra.entity.SPPDue;
import com.unindra.entity.SPPTransaction;
import com.unindra.entity.Section;
import com.unindra.entity.Staff;
import com.unindra.entity.Student;
import com.unindra.entity.Teacher;
import com.unindra.entity.TeachingAssignment;

import com.unindra.model.request.AddClassRequest;
import com.unindra.model.request.AddCourseRequest;
import com.unindra.model.request.AddDepartmentRequest;
import com.unindra.model.request.AddStudentRequest;
import com.unindra.model.request.AddTeacherRequest;
import com.unindra.model.request.AddTeachingAssignmentRequest;
import com.unindra.model.request.EditStudentRequest;
import com.unindra.model.request.RegisterStaffRequest;
import com.unindra.model.request.StudentWithDueInfo;
import com.unindra.model.request.UpdateClassroomRequest;
import com.unindra.model.request.UpdateCourseRequest;
import com.unindra.model.request.UpdateDepartmentRequest;
import com.unindra.model.request.UpdateSectionRequest;
import com.unindra.model.request.UpdateTeacherRequest;
import com.unindra.service.AttendanceService;
import com.unindra.service.ClassroomService;
import com.unindra.service.CourseService;
import com.unindra.service.DepartmentService;
import com.unindra.service.DistrictService;
import com.unindra.service.GradeService;
import com.unindra.service.PasswordService;
import com.unindra.service.ProvinceService;
import com.unindra.service.RegencyService;
import com.unindra.service.SPPDueService;
import com.unindra.service.SPPTransactionService;
import com.unindra.service.SectionService;
import com.unindra.service.StaffService;
import com.unindra.service.StudentService;
import com.unindra.service.TeacherService;
import com.unindra.service.TeachingAssignmentService;
import com.unindra.service.ValidationService;

import lombok.extern.slf4j.Slf4j;

/*
 * YANG BOLEH IMPORT SERVICE LAIN CUMA MASTER SERVICE
 * SELAIN MASTER SERVICE, GA BOLEHH 
 * JINGAN EMANG NI PROJECT
 * 
 * NGAPAIN JUGA GW MILIH NI JURUSAN
 * JURUSAN STRESS GINI BANYAK PEMINAT NYA
 * HERAN
 * COKKKK 
 */
/**
 * Service ini adalah service master untuk semua fitur yang dibutuhkan oleh
 * admin.
 * service ini boleh mengimport service lain di mana kalo yang lain ga bole.
 * 
 * semua utility akan dilakukan di sini (validation, hashing, dll).
 * 
 * walaupun service ini boleh mengimport service lain, tetapi service ini tidak
 * boleh mengimport repository lain nya
 * 
 */
@Slf4j
@Service
public class StaffMasterService {

    @Autowired
    private StudentService studentService;

    @Autowired
    private TeacherService teacherService;

    @Autowired
    private StaffService staffService;

    @Autowired
    private DepartmentService departmentService;

    @Autowired
    private ClassroomService classroomService;

    @Autowired
    private SectionService sectionService;

    @Autowired
    private CourseService courseService;

    @Autowired
    private ProvinceService provinceService;

    @Autowired
    private RegencyService regencyService;

    @Autowired
    private DistrictService districtService;

    @Autowired
    private ValidationService validationService;

    @Autowired
    private PasswordService passwordService;

    @Autowired
    private GradeService gradeService;

    @Autowired
    private TeachingAssignmentService teachingAssignmentService;

    @Autowired
    private SPPDueService dueService;

    @Autowired
    private SPPTransactionService transactionService;

    @Autowired
    private AttendanceService attendanceService;

     private final Integer MAX_STUDENT = 15;

    // STUDENT SERVICE LOGIC BUSSINESS
    public String addStudent(AddStudentRequest request) {

        String errorMesagge = validationService.validate(request);

        if (errorMesagge != null) {
            return errorMesagge;
        }

        if (studentService.isUsernameExist(request.getUsername())) {
            return "Username sudah digunakan";
        }

        // password generated by birthdate
        String password = String.join("", request.getDateBirth(), String.valueOf(request.getMonthBirth()),
                request.getYearBirth());
        String hashedPassword = passwordService.generateHashPw(password);

        String birthPlace = String.join(", ", request.getDistrict(), request.getCity(), request.getProvience());

        Integer year = Integer.parseInt(request.getYearBirth());
        Integer month = request.getMonthBirth() + 1;
        Integer date = Integer.parseInt(request.getDateBirth());

        LocalDate localDate = LocalDate.of(year, month, date);

        Student student = new Student();
        student.setName(request.getFullName());
        student.setGender(request.getGender());
        student.setUsername(request.getUsername());
        student.setPassword(hashedPassword);
        student.setEmail(request.getEmail());
        student.setPhoneNumber(request.getPhoneNumber());
        student.setBirthDate(localDate);
        student.setBirthPlace(birthPlace);

        Department department = departmentService.findByName(request.getDepartment());

        Classroom classroom = classroomService.findByDepartmentAndName(department, "10");
        if (classroom == null) {
            // Jika belum ada kelas 10, buat dulu
            classroom = new Classroom();
            classroom.setDepartment(department);
            classroom.setName("10");

            classroom = classroomService.save(classroom);
        }

        // Cari semua section di classroom
        List<Section> sections = classroom.getSections();
        Section selectedSection = null;

        for (Section section : sections) {
            int count = studentService.countBySection(section); // kamu harus punya method ini
            if (count < MAX_STUDENT) {
                selectedSection = section;
                break;
            }
        }

        if (selectedSection == null) {
            // Semua penuh, buat section baru
            char newSectionChar = (char) ('A' + sections.size());
            String sectionName = String.valueOf(newSectionChar);

            selectedSection = new Section();
            selectedSection.setName(sectionName);
            selectedSection.setClassroom(classroom);
            selectedSection = sectionService.save(selectedSection);
        }

        // ⬇️ Assign student ke section
        student.setDepartment(department);
        student.setClassroom(classroom);
        student.setSection(selectedSection);
        student.setBill(1_200_000);

        studentService.registerStudent(student);

        List<TeachingAssignment> assignments = teachingAssignmentService.findBySectionId(selectedSection.getId());
        for (TeachingAssignment assignment : assignments) {
            if (!gradeService.existsByStudentAndTeachingAssignment(student, assignment)) {
                Grade grade = new Grade();
                grade.setStudent(student);
                grade.setTeachingAssignment(assignment);
                grade.setTaskScore(0.0);
                grade.setMidTestScore(0.0);
                grade.setLastTestScore(0.0);

                gradeService.save(grade);
            }
        }
        createSPPDuesForStudent(student);

        return null;
    }

    public String editStudent(EditStudentRequest request) {

        String errorMessage = validationService.validate(request);

        if (errorMessage != null) {
            return errorMessage;
        }

        Optional<Student> optStudent = studentService.findStudentByUsername(request.getUsername());
        if (optStudent.isPresent() && !optStudent.get().getId().equals(request.getId())) {
            return "Username sudah dipakai oleh pengguna lain";
        }

        Student student = studentService.findById(request.getId())
                .orElseThrow(() -> new IllegalArgumentException("Data tidak ditemukan"));

        student.setName(request.getFullName());
        student.setGender(request.getGender());
        student.setUsername(request.getUsername());
        student.setEmail(request.getEmail());
        student.setPhoneNumber(request.getPhoneNumber());

        Integer year = Integer.parseInt(request.getYearBirth());
        Integer month = request.getMonthBirth() + 1;
        Integer date = Integer.parseInt(request.getDateBirth());

        LocalDate localDate = LocalDate.of(year, month, date);
        String birthPlace = String.join(", ", request.getDistrict(), request.getCity(), request.getProvience());

        student.setBirthDate(localDate);
        student.setBirthPlace(birthPlace);

        Department department = departmentService.findByName(request.getDepartment());
        Classroom classroom = classroomService.findByDepartmentAndName(department, request.getClassroom());

        Section section = null;
        List<Section> sections = classroom.getSections();
        for (Section s : sections) {
            if (request.getSection().equals(s.getName())) {
                section = s;
                break;
            }
        }

        student.setDepartment(department);
        student.setClassroom(classroom);
        student.setSection(section);

        studentService.edit(student);

        return null;
    }

    @Transactional
    public void deleteStudentById(Integer id) {

        Optional<Student> optStudent = studentService.findById(id);

        Student student = optStudent.get();

        student.setSection(null);
        student.setClassroom(null);
        student.setDepartment(null);

        List<SPPDue> sppDues = student.getSppDues();
        for (SPPDue sppDue : sppDues) {
            dueService.delete(sppDue);
        }
        sppDues.clear();

        List<Grade> grades = student.getGrades();
        for (Grade grade : grades) {
            gradeService.delete(grade);
        }
        grades.clear();

        List<Attendance> attendances = student.getAttendances();
        for (Attendance attendance : attendances) {
            attendanceService.delete(attendance);
        }
        attendances.clear();

        studentService.registerStudent(student);
        studentService.deleteById(id);

    }

    public List<Student> searchStudents(String keyword) {
        return studentService.searchStudents(keyword);
    }

    public List<Student> findStudents() {
        return studentService.findAll();
    }

    public Student findStudentById(Integer id) {
        Optional<Student> student = studentService.findStudentById(id);

        return student.get();
    }

    public List<Student> findStudentsByFilter(String departmentName, String classroomName, String sectionName) {
        boolean isAllDept = departmentName.equalsIgnoreCase("Semua Jurusan");
        boolean isAllClass = classroomName.equalsIgnoreCase("Semua Kelas");
        boolean isAllSection = sectionName.equalsIgnoreCase("Semua Section");

        if (isAllDept && isAllClass && isAllSection) {
            return studentService.findAll();
        }

        if (!isAllDept && isAllClass && isAllSection) {
            return studentService.findByDepartmentName(departmentName);
        }

        if (!isAllDept && !isAllClass && isAllSection) {
            return studentService.findByDepartmentAndClassroom(departmentName, classroomName);
        }

        if (!isAllDept && !isAllClass && !isAllSection) {
            return studentService.findByDepartmentClassroomSection(departmentName, classroomName, sectionName);
        }

        if (isAllDept && !isAllClass && isAllSection) {
            return studentService.findByClassroomName(classroomName);
        }

        if (isAllDept && !isAllClass && !isAllSection) {
            return studentService.findByClassroomAndSection(classroomName, sectionName);
        }

        if (isAllDept && isAllClass && !isAllSection) {
            return studentService.findBySectionName(sectionName);
        }

        return studentService.findAll(); // fallback
    }

    // TEACHER SERVICE LOGIC BUSSINESS
    public String registerTeacher(AddTeacherRequest request) {

        String errorMessage = validationService.validate(request);

        if (errorMessage != null) {
            return errorMessage;
        }

        if (teacherService.isUsernameExist(request.getUsername())) {
            return "Username sudah digunakan";
        }

        // password generated by birthdate
        String password = String.join("", request.getDateBirth(), String.valueOf(request.getMonthBirth()),
                request.getYearBirth());
        log.info("PASSWORD : {}", password);

        String hashedPassword = passwordService.generateHashPw(password);
        String birthPlace = String.join(", ", request.getDistrict(), request.getCity(), request.getProvience());

        Integer year = Integer.parseInt(request.getYearBirth());
        Integer month = request.getMonthBirth() + 1;
        Integer date = Integer.parseInt(request.getDateBirth());

        LocalDate localDate = LocalDate.of(year, month, date);

        Teacher teacher = new Teacher();
        teacher.setName(request.getFullName());
        teacher.setUsername(request.getUsername());
        teacher.setPassword(hashedPassword);
        teacher.setEmail(request.getEmail());
        teacher.setPhoneNumber(request.getPhoneNumber());
        teacher.setBirthDate(localDate);
        teacher.setBirthPlace(birthPlace);

        teacherService.registerTeacher(teacher);

        return null;
    }

    public void deleteTeacherById(Integer id) {
        teacherService.deleteById(id);
    }

    public String editTeacher(UpdateTeacherRequest request) {

        String errorMessage = validationService.validate(request);

        if (errorMessage != null) {
            return errorMessage;
        }

        Optional<Teacher> existing = teacherService.findByUsername(request.getUsername());
        if (existing.isPresent() && !existing.get().getId().equals(request.getId())) {
            return "Username sudah dipakai oleh pengguna lain";
        }

        Teacher teacher = teacherService.findById(request.getId())
                .orElseThrow(() -> new IllegalArgumentException("Data tidak ditemukan"));

        String birthPlace = String.join(", ", request.getDistrict(), request.getCity(), request.getProvience());

        Integer year = Integer.parseInt(request.getYearBirth());
        Integer month = request.getMonthBirth() + 1;
        Integer date = Integer.parseInt(request.getDateBirth());

        LocalDate localDate = LocalDate.of(year, month, date);

        teacher.setName(request.getFullName());
        teacher.setUsername(request.getUsername());
        teacher.setEmail(request.getEmail());
        teacher.setPhoneNumber(request.getPhoneNumber());
        teacher.setBirthDate(localDate);
        teacher.setBirthPlace(birthPlace);

        teacherService.updateTeacher(teacher);

        return null;
    }

    public List<Teacher> searchTeachers(String keyword) {
        return teacherService.searchTeachers(keyword);
    }

    public List<Teacher> getAllTeacher() {
        return teacherService.getAll();
    }

    public Teacher findTeacherById(Integer id) {
        Optional<Teacher> teacherOptional = teacherService.findById(id);

        return teacherOptional.get();
    }

    // STAFF SERVICE LOGIC BUSSINESS
    public String registerStaff(RegisterStaffRequest request) {

        String errorMessage = validationService.validate(request);

        if (errorMessage != null) {
            return errorMessage;
        }

        if (staffService.isUsernameExist(request.getUsername())) {
            return "Username sudah digunakan";
        }

        if (!passwordService.isPasswordEquals(request.getPassword(), request.getConfirmPassword())) {
            return "Password tidak sama";
        }

        String hashedPassword = passwordService.generateHashPw(request.getPassword());
        String birthPlace = String.join(", ", request.getDistrict(), request.getCity(), request.getProvience());

        Integer year = Integer.parseInt(request.getYearBirth());
        Integer month = request.getMonthBirth() + 1;
        Integer date = Integer.parseInt(request.getDateBirth());

        LocalDate localDate = LocalDate.of(year, month, date);

        Staff staff = new Staff();
        staff.setGender(request.getGender());
        staff.setName(request.getFullName());
        staff.setUsername(request.getUsername());
        staff.setPassword(hashedPassword);
        staff.setEmail(request.getEmail());
        staff.setPhoneNumber(request.getPhoneNumber());
        staff.setBirthDate(localDate);
        staff.setBirthPlace(birthPlace);

        staffService.add(staff);

        return null;
    }

    // DEPARTMENT SERVICE LOGIC BUSSINESS
    public String addDepartment(AddDepartmentRequest request) {

        String errorMessage = validationService.validate(request);

        if (errorMessage != null) {
            return errorMessage;
        }

        if (departmentService.isDepartmentExist(request.getName())) {
            return "Jurusan sudah tersedia";
        }
        ;

        Department department = new Department();

        department.setName(request.getName());
        department.setCode(request.getCode());
        // department.setId(departmentService.generateId());

        departmentService.register(department);

        return null;

    }

    public String updateDepartment(UpdateDepartmentRequest request) {

        String errorMessage = validationService.validate(request);

        if (errorMessage != null) {
            return errorMessage;
        }

        Department department = departmentService.findById(request.getId());

        List<Department> departments = departmentService.findDepartments();

        for (Department department2 : departments) {
            if (department2.getName().equalsIgnoreCase(request.getDepartmentName())
                    && department2.getId().equals(request.getId())) {
                return String.format("Jurusan %d sudah ada", request.getDepartmentName());
            }
        }

        department.setName(request.getDepartmentName());

        departmentService.update(department);
        return null;

    }

    public String deleteDepartmentById(Integer id) {

        Department department = departmentService.findById(id);

        boolean hasClassroom = department.getClassrooms().size() > 0;

        if (hasClassroom) {
            return "Jurusan tidak dapat dihapus karena masih memiliki kelas";
        }

        departmentService.deleteById(id);

        return null;
    }

    public List<Department> findDepartments() {

        return departmentService.findDepartments();

    }

    public String[] getDepartments() {
        List<Department> departments = departmentService.findDepartments();

        if (departments.size() == 0) {
            return new String[] {};
        }

        return departments.stream().map(Department::getName).toArray(String[]::new);
    }

    public String[] getAllDepartment() {
        List<Department> departments = departmentService.findDepartments();

        if (departments.size() == 0) {
            return new String[] {};
        }

        String[] result = departments.stream()
                .map(Department::getName)
                .collect(Collectors.collectingAndThen(
                        Collectors.toList(),
                        list -> {
                            list.add(0, "Semua Jurusan");
                            return list.toArray(new String[0]);
                        }));
        return result;
    }

    public Department findDepartmentByName(String selectedDept) {

        return departmentService.findByName(selectedDept);
    }

    public Department findDepartmentById(Integer id) {

        return departmentService.findById(id);

    }

    public String[] getDepartmentForComboBox() {

        List<Department> departments = departmentService.findDepartments();

        List<String> result = new ArrayList<>();
        result.add("Semua Jurusan"); // Tambahkan default pertama

        for (Department dept : departments) {
            result.add(dept.getName());
        }

        return result.toArray(new String[0]);
    }

    // CLASSROOM SERVICE LOGIC BUSSINESS
    public String addClass(AddClassRequest request) {

        Department department = departmentService.findByName(request.getDepartment());

        if (department == null) {
            return "Jurusan tidak ditemukan";
        }

        // Cari classroom (misalnya 10, 11, 12) berdasarkan jurusan
        Classroom classroom = classroomService.findByDepartmentAndName(department, request.getClassroom());

        if (classroom == null) {
            // Jika belum ada, buat classroom baru
            classroom = new Classroom();
            classroom = classroomService.add(department, request.getClassroom());
        }

        // Hitung jumlah section yang sudah ada di classroom ini
        List<Section> existingSections = classroom.getSections();

        // Buat nama section berdasarkan jumlah yang ada
        char nextSectionChar = (char) ('A' + existingSections.size());
        String nextSectionName = String.valueOf(nextSectionChar);

        // Buat section baru
        Section newSection = new Section();
        newSection.setName(nextSectionName);
        newSection.setClassroom(classroom);
        sectionService.save(newSection);

        return null;

    }

    public String updateClassroom(UpdateClassroomRequest request) {

        String errorMessage = validationService.validate(request);
        if (errorMessage != null) {
            return errorMessage;
        }

        Classroom oldClassroom = classroomService.findById(request.getId());
        String oldName = oldClassroom.getName();
        String newName = request.getClassroomName();

        if (oldName.equalsIgnoreCase(newName)) {
            return "Tidak ada perubahan data.";
        }

        Department department = oldClassroom.getDepartment();

        // 1. Cari classroom tujuan
        Classroom newClassroom = null;
        for (Classroom c : department.getClassrooms()) {
            if (newName.equalsIgnoreCase(c.getName())) {
                newClassroom = c;
                break;
            }
        }

        // 2. Jika classroom belum ada → buat
        if (newClassroom == null) {
            newClassroom = new Classroom();
            newClassroom.setName(newName);
            newClassroom.setDepartment(department);
            classroomService.save(newClassroom); // simpan classroom baru
        }

        // 3. Siapkan daftar section di kelas baru
        Set<String> existingSectionNames = newClassroom.getSections().stream()
                .map(s -> s.getName().toUpperCase())
                .collect(Collectors.toSet());

        // 4. Pindahkan section lama ke classroom baru + rename jika bentrok
        for (Section section : oldClassroom.getSections()) {
            String originalName = section.getName().toUpperCase();
            String newSectionName = originalName;

            while (existingSectionNames.contains(newSectionName)) {
                newSectionName = nextAlphabet(newSectionName);
            }

            if (!newSectionName.equals(originalName)) {
                section.setName(newSectionName);
            }

            section.setClassroom(newClassroom);
            sectionService.update(section);
            existingSectionNames.add(newSectionName);
        }

        // 5. Opsional: hapus classroom lama kalau sudah tidak punya section
        if (oldClassroom.getSections().isEmpty()) {
            classroomService.deleteById(oldClassroom.getId());
        }

        return "Kelas berhasil dipindahkan ke " + newClassroom.getName();
    }

    public List<Classroom> findClassrooms() {

        return classroomService.findClassrooms();
    }

    public String[] getDistinctClassroom() {
        List<String> distinctClassroomName = classroomService.findDistinctClassroomName();

        return distinctClassroomName.stream().toArray(String[]::new);
    }

    public String[] getAllDistinctClassroom() {

        List<String> distinctClassroom = classroomService.getDistinctClassroom();

        return distinctClassroom.stream()
                .collect(Collectors.collectingAndThen(
                        Collectors.toList(),
                        list -> {
                            list.add(0, "Semua Kelas");
                            return list.toArray(new String[0]);
                        }));
    }

    public String[] getClassroomsByDepartmentName(String departmentName) {

        List<String> distinctClassroomByDepartment = classroomService.findDistinctClassroomByDepartment(departmentName);

        return distinctClassroomByDepartment.stream().map(String::toString).toArray(String[]::new);

    }

    public Classroom findClassroomById(Integer id) {

        return classroomService.findById(id);

    }

    public String deleteClassroomById(Integer id) {

        Classroom classroom = classroomService.findById(id);

        boolean hasSection = classroom.getSections().size() > 0;

        if (hasSection) {
            return "Kelas tidak dapat dihapus karena masih memiliki section";
        }

        classroomService.deleteById(id);

        return null;
    }

    public String[] getAllDistinctClassroomByDepartmentName(String departmentName) {

        if (departmentName.equals("Semua Jurusan")) {
            return getAllDistinctClassroom();
        }

        List<String> distinctClassroom = classroomService.findDistinctClassroomByDepartment(departmentName);
        List<String> strings = new ArrayList<>();
        strings.add("Semua Kelas");

        for (String string : distinctClassroom) {
            strings.add(string);
        }

        return strings.toArray(new String[0]);

    }

    public String[] getClassroomsForComboBox(String deparmentName) {
        Department department = departmentService.findByName(deparmentName);

        List<Classroom> classrooms = department.getClassrooms();

        List<String> result = new ArrayList<>();
        result.add("Semua Kelas"); // Tambahkan default pertama

        if (deparmentName.equals("Semua Jurusan")) {
            String[] distinctClassroom = getDistinctClassroom();
            for (String s : distinctClassroom) {
                result.add(s);
            }
        } else {
            for (Classroom c : classrooms) {
                result.add(c.getName());
            }
        }

        return result.toArray(new String[0]);
    }

    // SECTION SERVICE LOGIC BUSSINESS
    public List<Section> findSection() {
        return sectionService.findAll();
    }

    public Section findSectionById(Integer id) {

        return sectionService.findById(id);
    }

    public String[] getDistinctSection() {

        List<String> distinctSection = sectionService.findDistinctSection();

        return distinctSection.stream().toArray(String[]::new);
    }

    public String[] getAllDistinctSection() {

        List<String> distinctSection = sectionService.findDistinctSection();

        return distinctSection.stream()
                .collect(Collectors.collectingAndThen(
                        Collectors.toList(),
                        list -> {
                            list.add(0, "Semua Section");
                            return list.toArray(new String[0]);
                        }));
    }

    public String[] getSectionsByDepartmentNameAndClassroomName(String departmentName, String classroomName) {

        Department department = departmentService.findByName(departmentName);

        Classroom classroom = null;

        List<Classroom> classrooms = department.getClassrooms();
        for (Classroom c : classrooms) {
            if (c.getName().equals(classroomName)) {
                classroom = c;
                break;
            }
        }

        if (classroom == null) {
            return new String[0];
        }

        List<Section> sections = classroom.getSections();

        return sections.stream().map(Section::getName).toArray(String[]::new);
    }

    public String updateSection(UpdateSectionRequest request) {

        String errorMessage = validationService.validate(request);

        if (errorMessage != null) {
            return errorMessage;
        }

        Section section = sectionService.findById(request.getId());

        Integer classroomId = section.getClassroom().getId();

        Classroom classroom = classroomService.findById(classroomId);

        List<Section> sections = classroom.getSections();
        for (Section section2 : sections) {
            if (request.getName().equalsIgnoreCase(section2.getName()) &&
                    !section2.getId().equals(section.getId())) {
                return "Section sudah ada";
            }

            section.setName(request.getName().toUpperCase());
        }

        sectionService.update(section);

        return null;
    }

    public String deleteSectionById(Integer id) {

        Section section = sectionService.findById(id);

        boolean sectionHasStudent = section.getStudents().size() > 0;

        if (sectionHasStudent) {
            return "Section tidak dapat dihapus karena masih memiliki siswa";
        }

        sectionService.deleteById(id);

        return null;
    }

    // COURSE SERVICE LOGIC BUSSINESS
    public String addCourse(AddCourseRequest request) {

        String errorMessage = validationService.validate(request);

        if (errorMessage != null) {
            return errorMessage;
        }

        Department department = departmentService.findByName(request.getDepartment());
        Classroom classroom = classroomService.findByDepartmentAndName(department, request.getClassroom());

        boolean courseExist = courseService.isCourseExist(request.getName(), department, classroom);

        if (courseExist) {
            return "Mata pelajaran sudah ada";
        }

        Course course = new Course();

        course.setDepartment(department);
        course.setClassroom(classroom);
        course.setName(request.getName());

        courseService.add(course);

        return null;
    }

    public List<Course> findAllCourse() {
        return courseService.findAll();
    }

    public Course findCourseById(Integer id) {
        Optional<Course> course = courseService.findById(id);

        return course.get();
    }

    public String updateCourse(UpdateCourseRequest request) {

        String errorMessage = validationService.validate(request);

        if (errorMessage != null) {
            return errorMessage;
        }

        Department department = departmentService.findByName(request.getDepartment());
        Classroom classroom = classroomService.findByDepartmentAndName(department, request.getClassroom());

        boolean courseExist = courseService.isCourseExist(request.getName(), department, classroom);

        if (courseExist) {
            return "Mata pelajaran sudah ada";
        }

        Course course = new Course();
        course.setId(request.getId());
        course.setName(request.getName());
        course.setDepartment(department);
        course.setClassroom(classroom);

        courseService.update(course);

        return null;
    }

    public void deleteCourseById(Integer id) {
        courseService.deleteById(id);
    }

    // REGION SERVICE LOGIC BUSSINESS
    public String[] getProvinces() {

        List<Province> provinces = provinceService.findAll();

        return provinces.stream().map(Province::getName).toArray(String[]::new);

    }

    public String[] getRegenciesByProvinceName(String provinceName) {

        if (provinceName == null) {
            return new String[0];
        }

        Province province = provinceService.findByName(provinceName);

        List<Regency> regencies = regencyService.findByProvinceId(province.getId());

        return regencies.stream().map(Regency::getName).toArray(String[]::new);
    }

    public String[] getDistrictsByRegencyName(String regencyName) {

        if (regencyName == null) {
            return new String[0];
        }

        Regency regency = regencyService.findByName(regencyName);

        List<District> districts = districtService.findByRegencyId(regency.getId());

        return districts.stream().map(District::getName).toArray(String[]::new);
    }

    public List<String> findClassroomByDepartment(Department department) {

        List<String> distinctClassroomByDepartment = classroomService
                .findDistinctClassroomByDepartment(department.getName());

        return distinctClassroomByDepartment;
    }

    public String[] findClassroomByDepartmentName(String departmentName) {

        List<Department> allByName = departmentService.findAllByName(departmentName);

        return allByName.stream().map(Department::getName).toArray(String[]::new);
    }

    private String nextAlphabet(String current) {
        char c = current.charAt(0);
        if (c >= 'A' && c < 'Z') {
            return String.valueOf((char) (c + 1));
        } else {
            return current + "A"; // Z → ZA, bisa dikembangkan jadi lebih canggih
        }
    }

    // UTIL
    public String[] getDates() {
        String[] dates = new String[31];
        for (int i = 1; i <= 31; i++) {
            dates[i - 1] = String.valueOf(i);
        }
        return dates;
    }

    public String[] getMonths() {
        return new String[] {
                "Januari", "Februari", "Maret", "April", "Mei", "Juni",
                "Juli", "Agustus", "September", "Oktober", "November", "Desember"
        };
    }

    public String[] getTeacherYears() {
        int currentYear = LocalDate.now().getYear();
        int startYear = currentYear - 18;
        int endYear = currentYear - 50;
        int size = startYear - endYear + 1;
        String[] years = new String[size];
        for (int i = 0; i < size; i++) {
            years[i] = String.valueOf(startYear - i);
        }
        return years;
    }

    public String[] getStudentYears() {
        int currentYear = LocalDate.now().getYear();
        int startYear = currentYear - 5;
        int endYear = currentYear - 17;
        int size = startYear - endYear + 1;
        String[] years = new String[size];
        for (int i = 0; i < size; i++) {
            years[i] = String.valueOf(startYear - i);
        }
        return years;
    }

    /**
     * Method ini mengembalikan semua section dari kelas
     * dan juga tambahan String "Semua Kelas"
     */
    public String[] getAllSectionByDepartmentNameAndClassroomName(String departmentName, String classroomName) {

        if (departmentName.equals("Semua Jurusan") && !classroomName.equals("Semua Kelas")) {
            List<Section> sections = sectionService.findByClassroomName(classroomName);

            List<String> sectionNames = sections.stream()
                    .map(Section::getName)
                    .distinct()
                    .collect(Collectors.toList());

            // Tambahkan "Semua Section" di awal
            sectionNames.add(0, "Semua Section");

            return sectionNames.toArray(new String[0]);
        }

        if (classroomName.equals("Semua Kelas")) {
            return getAllDistinctSection();
        }

        Department department = departmentService.findByName(departmentName);

        Classroom classroom = null;
        List<Classroom> classrooms = department.getClassrooms();

        for (Classroom c : classrooms) {
            if (c.getName().equals(classroomName)) {
                classroom = c;
                break;
            }
        }

        List<Section> sections = classroom.getSections();
        String[] sectionNames = sections.stream().map(Section::getName).toArray(String[]::new);

        String[] result = new String[sectionNames.length + 1];
        result[0] = "Semua Section";
        System.arraycopy(sectionNames, 0, result, 1, sectionNames.length);

        return result;
    }

    public void addTeachingAssignmentRequest(AddTeachingAssignmentRequest assignment) {

        // cari teacher berdasarkan id nya
        Teacher teacher = teacherService.findById(assignment.getTeacherId()).get();

        // cari jurusan berdasarkan naam
        Department dept = departmentService.findByName(assignment.getDepartmentName());

        // cari kelas yang dipilih
        Classroom classroom = null;
        for (Classroom c : dept.getClassrooms()) {
            if (c.getName().equals(assignment.getClassroomName())) {
                classroom = c;
                break;
            }
        }

        // cari section kelas
        Section section = null;
        for (Section s : classroom.getSections()) {
            if (s.getName().equals(assignment.getSectionName())) {
                section = s;
                break;
            }
        }

        // cari mapel yang dipilih
        Course course = null;
        for (Course c : classroom.getCourses()) {
            if (c.getName().equals(assignment.getCourseName())) {
                course = c;
            }
        }

        // buat assign baru
        TeachingAssignment assign = new TeachingAssignment();

        assign.setTeacher(teacher);
        assign.setCourse(course);
        assign.setSection(section);

        teachingAssignmentService.addCourseForTeacher(assign);

        List<Student> students = section.getStudents();
        for (Student student : students) {
            Grade grade = new Grade();

            grade.setStudent(student);
            grade.setTeachingAssignment(assign);
            grade.setTaskScore(0.0);
            grade.setMidTestScore(0.0);
            grade.setLastTestScore(0.0);

            gradeService.save(grade); // Simpan grade ke database
        }

    }

    public List<TeachingAssignment> getSizeCourseByTeacherId(Integer id) {

        Teacher teacher = teacherService.findById(id).get();

        return teacher.getTeachingAssignments();
    }

    public void createSPPDuesForStudent(Student student) {
        List<SPPDue> dues = new ArrayList<>();
        int startMonth = 7; // Juli
        int year = LocalDate.now().getYear();

        for (int i = 0; i < 12; i++) {
            int month = (startMonth + i - 1) % 12 + 1;
            int dueYear = (startMonth + i - 1) / 12 + year;
            SPPDue due = new SPPDue();
            due.setStudent(student);
            due.setMonth(month);
            due.setYear(dueYear);
            due.setPaid(false);
            dues.add(due);
        }
        dueService.saveAll(dues);
    }

    public List<StudentWithDueInfo> getStudentsWithBill() {
        List<Student> students = studentService.findAll();

        List<StudentWithDueInfo> result = new ArrayList<>();

        for (Student student : students) {
            StudentWithDueInfo s = new StudentWithDueInfo();

            String classroom = student.getClassroom().getName();
            String section = student.getSection().getName();
            String joinedClassroom = String.format("%s/%s", classroom, section);

            s.setId(student.getId());
            s.setName(student.getName());
            s.setDepartment(student.getDepartment().getName());
            s.setClassroom(joinedClassroom);
            s.setUnpaidCount(dueService.countByStudentAndPaidFalse(student));

            result.add(s);
        }
        return result;
    }

    public String[] getUnpaidMonthsForStudent(Integer studentId) {
        Student student = studentService.findById(studentId).orElse(null);

        if (student == null)
            return new String[0];

        List<SPPDue> dues = dueService.findByStudentAndPaidFalse(student);

        DateFormatSymbols dfs = new DateFormatSymbols(Locale.forLanguageTag("id-ID"));
        String[] allMonthNames = dfs.getMonths();

        List<String> result = new ArrayList<>();
        for (SPPDue due : dues) {
            // Convert month number (1-12) to name
            String monthName = allMonthNames[due.getMonth() - 1]; // offset karena array dimulai dari 0
            result.add(monthName + " " + due.getYear()); // contoh: "Juli 2024"
        }

        return result.toArray(new String[0]);
    }

    @Transactional
    public String paySpp(Integer studentId, List<String> selectedMonths) {
        Student student = studentService.findById(studentId).orElse(null);
        if (student == null)
            return "Siswa tidak ditemukan";

        List<SPPDue> unpaidDues = dueService.findByStudentAndPaidFalse(student);
        List<SPPDue> duesToPay = new ArrayList<>();

        for (String selected : selectedMonths) {
            try {
                String[] parts = selected.split(" ");
                String monthName = parts[0];
                int year = Integer.parseInt(parts[1]);

                int monthNum = DateTimeFormatter.ofPattern("MMMM", Locale.forLanguageTag("id-ID"))
                        .parse(monthName).get(ChronoField.MONTH_OF_YEAR);

                for (SPPDue due : unpaidDues) {
                    if (due.getMonth() == monthNum && due.getYear() == year) {
                        duesToPay.add(due);
                        break;
                    }
                }
            } catch (Exception e) {
                return "Format bulan tidak valid: " + selected;
            }
        }

        if (duesToPay.isEmpty())
            return "Tidak ada bulan yang cocok untuk dibayar";

        // Buat transaksi
        SPPTransaction transaction = new SPPTransaction();
        transaction.setStudent(student);
        transaction.setMonthsPaid(duesToPay.size());
        transaction.setTotalPaid(duesToPay.size() * 100_000.0);
        transaction.setPaymentDate(LocalDate.now());
        transaction.setPaidDues(duesToPay);

        // Update setiap due
        for (SPPDue due : duesToPay) {
            due.setPaid(true);
            due.setTransaction(transaction); // penting!
        }

        transactionService.save(transaction); // akan cascade save paidDues jika relasi terkonfigurasi
        dueService.saveAll(duesToPay);

        return null;
    }

    public List<SPPTransaction> findAllTransaction() {
        return transactionService.findAll();
    }

    @Transactional
    public SPPTransaction findTransactionById(Integer id) {
        return transactionService.findById(id);
    }

    public SPPTransaction findTransactionWithPaidDuesById(Long id) {
        return transactionService.findTransactionWithPaidDuesById(id);
    }

}
